[namespace]
네임스페이스는 분류를 통한 충돌 방지와 가독성 향상을 위해 도움이 적극적으로 되는 경우에만 사용한다.
외부나 타인에게 제공하는 라이브러리를 개발하는 경우에는 본 프로그램과의 충돌을 미연에 방지하기 위해 유익할 수 있으나,
한 조직 내에서 이름 충돌을 정책적으로, 개발 단계에서 방어할 수 있는 상황에서도 기계적으로 적용해버리면 타이핑만 많아지고 유익함이 떨어진다.
NHN 에서 플랫폼/엔진 부서에 오래 있다보니 네임스페이스 사용하는 게 기계적인 습관이 붙어버렸다.
지금 회사 코드에서는 전부 걷어내고 싶지만, 그러기엔 프로젝트가 너무 커져버렸다..

[code style]

이왕 주석 남길거면 doxygen style 로 남겨서 나중에 manual 작성 자동하할 수 있도록 한다.
visual assist 의 code template 활용하면 author 나 date 같은 부분들은 파일 생성할 때 자동화 가능하다.
다른 유사한 툴에도 비슷한 기능 많고.

__int64 userpid 같은 형태는 처음부터 USERPID userpid 처럼
__int64 타입을 USERPID 타입으로 재정의해서 사용하면 주석 남길 일도 없고 가독성도 편하고, 타입 잘못 쓸 일도 없음.

헝가리안 표기와 같이 prefix 에서 정보를 포함하는 형태는 개발툴이 불편했던 2000년 이전에는 유용했으나,
지금은 IDE 가 발전해서 변수 이름으로부터 필요한 정보(형타입, 스코프)가 다 나와서 장점이 별로 없다고 본다.

pointer 보다는 reference 를 활용하는 게 낫다.
첫째, 더 안전하다. 레퍼런스는 nullptr 이 될 수 없으니까.
둘째, 코드 가독성 측면에서 낫다. *나 & 와 같은 기호를 안써도 되니까
세째, 소유권을 명확히 할 수 있다. pointer는 메모리 할당 해제를 같은 스코프에서 강제할 수 없으나, ref 는 가능하다.
원형에 대한 변경 위험을 이야기할 수도 있겠으나, const 를 통해서 제어하면 딱히 위험할 이유도 없다.

if/else/for/while 과 같은 제어문에서 중괄호{}를 반드시 적용하는 것에 대해 스타일 논쟁이 많다.
예전에는 중괄호를 예외 적용 없이 무조건 해야 하는 게 훨씬 낫다고 생각했으나...
한 프로젝트에서 코드를 수십만 줄 이상을 작성하다보니, 한줄 짜리 제어문 실행 구문에 중괄호를 넣는게 다분히 비효율적이라고 생각하기 시작했다.

때로는 스타일에 대한 표준을 팀 개발자들의 취향과 기준에 맞지 않게 정하기도 한다.
팀 분위기에 따라 엄격한 스타일 가이드라인을 따르지 못하기도 한다.
이럴 때는 반드시 표준화해야 하는 요소(들여쓰기, 주석)와 각자 마음대로 정해도 상관없는 요소(탭, 스페이스)를 적절히 선별하는 것이 좋다.