절차형 접근 방식이 '이 프로그램이 무슨 일을 하는가?'라는 질문을 토대로 접근하는 데 반해
객체지향 접근 방식은 '현실세계의 어떤 대상을 모델링하는가?'라는 관점에서 접근한다.

물리적이나 대상 뿐 아니라, 개념적인 대상 등 객체화할 수 있는 객체 개념은 넓고,
그 개념화가 넓을 수록 유연하고 효율적으로 문제 해결에 어울리는 설계에 접근할 여지가 크다.

객체 지향 시스템을 창의적으로 디자인하는 것과, 사소한 것까지 객체로 만들어
동료들을 불편하게 만드는 것은 분명 다르다.

객체를 과도하게 일반화하면 구체적인 대상을 표현하기 힘들다.

객체 관계는 크게 has-a 관계와 is-a 관계로 크게 나눌 수 있다.
설계 과정에 두 관계 중 채택이 쉽지 않은 경우는 대개 has-a 관계를 선택하는 게 더 나은 결과로 이끄는 경우가 많다.

하나로부터 하나를 확장할 때, 원형을 수정하지 않고 추가하기 쉬워서이다.
이는 동작을 바꾸지 않고도 베이스 클래스 대신 파생클래스를 사용할 수 있어야 한다는 
LSP ( liskov substitution principle ) 에 더 충실하게 해준다.

API 설계를 할 때, 한 API 에 너무 많은 기능과 옵션을 담으려고 하지 마라.
잘 만든 API 란, 쉬운 일은 쉽게, 복잡한 일은 가능하게 하는 것이다.