waterfall model

sasimi model

spiral model

애자일 프로젝트 방법론에 대한 선언
	1. 프로세스와 도구보다는 개인과 상호작용
	2. 완벽한 문서보다는 실제 작동하는 소프트웨어
	3. 고객과 협상하기보다는 고객과 협력하기
	4. 계획을 따르기보다는 변화에 대처하기

Unified Process

프로세스로 본 RUP ( Rational Unified Process )
	1. business mdeling workflow
	2. requirement workflow
	3. analysis and design workflow
	4. implementation workflow
	5. testing workflow
	6. deployment workflow
	7. configuration management workflow
	8. environment workflow

애자일의 구체적인 수행 방법으로서의 스크럼
	1. product owner 는 백로그의 우선순위를 결정
	2. scrum master 는 프로세스의 운영을 담당
	3. daily scrum 을 15분 내외로 주기적 수행
	4. dash board 를 활용한 스프린트 계획의 관리(to do/in progress/done)
	5. 내 생각에 가장 가치 있는 활동은 sprint review 를 통해서 계속해서 과정을 개선해나간다는 것이다.
	   효과가 있는 것과 없는 것을 구분해서 업무 프로세스를 지속적으로 개선한다.

eXtreme Programming eXplained
	1. pair programming
	2. 진행하면서 계획하기
	3. Test Driven Development
	4. 고객과함께 진행하기
	5. 지속적인 통합
	6. 수시로 리팩토링
	7. 점진적 릴리즈
	8. coding convension
	9. 코드 공유
	10. 간결한 디자인
	11. 공통 메타포/도메인의 사용
	12. 최상의 효율적인 작업 시간

Software Triage
	Triage 의 사전적 정의는 [(치료 우선순위를 정하기 위한) 부상자 분류] 를 말한다.

	소프트웨어 트리아지란 프로젝트가 이미 상당히 망가진 상태에서는 리소스가 부족하다는 개념이다.
	이 상태에서는 시간도 부족하고, 개발자도 부족하고, 예산도 부족하다.
	결정적으로 관리자와 개발자는 프로젝트 일정이 너무 지체된 나머지 주어진 시간에 요구사항 모두 만족시킬 수 없다는 사실을
	받아들이긴 힘들겠지만 현실을 인정하고 극복해야 한다.
	그런 다음 남은 작업을 필수(must-have), 권장(should-have), 옵션(nice to have) 항목으로 분류한다.
	
	소프트웨어 트리아지는 힘들면서도 주의를 기울여야 할 프로세스다.
	'죽음의 행진'에 빠져든 프로젝트에서 힘든 결정을 내리기 위해서는 노련한 리더쉽이 필요할 때가 많다.
	개발자 입장에서 가장 신경 쓸 부분은 상황에 따라 프로젝트 일정을 맞추기 위해 기존 절차와 코드를 과감히 버리는 것이다.