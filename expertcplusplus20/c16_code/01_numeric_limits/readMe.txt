C++ 표준 라이브러리는 예전에는 STL 이라는 이름으로 불리웠다... 와.. 난 옛날 사람이구나.

함수호출연산자를 구현하는 클래스를 함수 객체(functor) 라 부른다.
함수 객체는 특정한 표준 라이브러리 알고리즘에 대한 조건식(predicate) 등에 활용된다.

predicate 란
조건문처럼 bool 값을 결과로 내는 함수(또는 함수객체)를 의미하며, 수리 논리에서 말하는 명제 함수(술어 함수)와 개념이 같아서 술어라고 표현하기도 한다.
간단히 조건식이라고 부르기도 한다.

vector 중간에 원소를 추가하거나 삭제하려면 다른 원소를 이동해서 시간이 좀 걸리긴 해도 컨테이너 중에서 vector 를 기본으로 선택하는 것이 좋다.
원소를 중간에 추가하거나 삭제하는 연산만 비교해봐도 연결리스트와 같은 다른 데이터 구조보다 vector 가 대체로 빠른데,
vector 는 연속된 메모리 공간에 저장하는 반면, 연결 리스트는 여러 지점에 흩어져 있기 때문이다.

unordered_map, unordered_set 은 hash_map, hash_set이다.
이름을 그렇게 짓지 못한 이유는, 이미 hash 로 시작하는 이름을 사용하는 서드파티 라이벌리가 많아,
c++ 표준 위원회에서 이름 충돌을 피하도록 hash 란 이름 대신 unordered 라는 접두어를 사용하기로 했기 때문이다.

알고리즘 컨테이너가 이론상 구분돼 있지만, 어떤 컨테이너는 클래스 메서드 형태로 알고리즘을 제공하기도 한다.
이렇게 하는 이유는 컨테이너의 성격에 따라 제너릭 알고리즘으로 처리하면 성능이 떨어지기 때문이다.
set 에서 제공하는 find() 메서드에 적용된 알고리즘은 제너릭 버전의 find() 알고리즘보다 더 빠르다.
가능하면 컨테이너에 최적화된 알고리즘이 구현된 메서드를 사용하는 것이 좋다.

표준 라이브러리에서 제공하지 않는 기능
1. 여러 스레드가 컨테이너에 동시에 접근할 때 스레드 안정성을 보장하지 않는다.
2. 표준 라이브러리에서는 제너릭 트리나 그래프 구조를 제공하지 않는다.
   map 이나 set 이 균형 트리(avl)로 구현되어 있지만, 이를 직접 사용하도록 인터페이스를 제공하지는 않는다.
   파서 등을 구현하기 위해 트리나 그래프 구조가 필요하다면 직접 만들거나 다른 라이브러리를 활용한다.