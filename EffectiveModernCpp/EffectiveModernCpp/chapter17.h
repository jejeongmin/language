#pragma once

#include <functional>
#include <memory>


/*********************************************************
 복사 생성자와 달리 이동 생성자의 경우는 
 이동 생성자 혹은 이동 배정 연산자 중 하나만 선언하더라도
 나머지 하나를 컴파일러가 자동으로 구현하지 않는다.
 그 이유는 이동 관련 연산을 직접 선언했다는 것은 이동 연산을 수행할 때
 성능 관련 문제가 중요함을 암시하고 있기 때문이다.
**********************************************************/

using namespace std;

class chapter17 : public chapter
{
	class Widget
	{
	public:
		Widget(Widget&& rhs);				// 이동 생성자
		Widget& operator=(Widget&& rhs);	// 이동 배정 연산자

		Widget(const Widget&) = default;	// 컴파일러가 해주는 기본 구현을 사용하겠다는 명시적 선언
	};

	virtual int chapterMain()
	{

		return 0;
	}
};

/*
	컴파일러가 스스로 작성할 수 있는 멤버 함수들, 즉 기본 생성자와 소멸자, 복사 연산들, 이동 연산들을
	가르켜 특수 멤버 함수라고 부른다.

	이동 연산들은 이동 연산들이나 복사 연산들, 소멸자가 명시적으로 선언되어 있지 않은 클래스에 대해서만 작성된다.

	복사 생성자는 복사 생성자가 명시적으로 선언되어 있지 않은 클래스에 대해서만 자동으로 작성되며,
	만일 이동 연산이 하나라도 선언되어 있으면 삭제된다.
	소멸자가 명시적으로 선언된 클래스에서 복사 연산들이 자동 작성되는 기능은 비권장이다.

	멤버 함수 템플릿 때문에 특수 멤버 함수의 자동 작성이 금지되는 경우는 전혀 없다.
*/