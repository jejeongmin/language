# -*- coding: utf-8 -*-

import re

def remove_white_space():

    white_space_str = ' abc defg hijk lmnop '
    print ('Before trim : "%s" ' % white_space_str)

    trimed_str = white_space_str.replace(' ', '')
    print ('After trim : "%s" ' % trimed_str)

def get_korean_identify():

    # 검증할 주민등록번호들의 목록으로 아래 목록에서 단 두개의 값만 유효합니다.
    # 111111-1111111 과 500102-1000000 만 유효
    identify_str = '''
    111111-1111111
    222222-22222222
    3333-333333333
    444444*4444444
    555555 5555555
    666666-6666666
    7777-777777
    500102-1000000
    '''

    # 주민 등록 정규식 분석
    # 'r' : raw string 이라는 뜻으로 '\n', '\t' 와 같은 문자를 특수문자로 처리하지 않고, 문자 그대로 처리합니다.
    # '?:' : Non-capturing 문자로 이 조건과 뒤에 나오는 다른 조건이 맞아야지 정규 표현식에서 걸러집니다.
    #        예를 들어 아래 정규 표현식에서 맨처음의 '?:' 를 제거하고 실행하면, 주민등록 번호의 앞부분만 정규 표현식으로 검출됩니다.
    # [0-9]{2} : 주민등록번호의 년도에 해당하는 부분으로 00 년생부터 99년생까지 확인합니다.
    # (0[1-9]|1[0-2]) : 주민등록번호의 월에 해당하는 부분으로 0[1-9] 나 1[0-2] 의 조건 중 하나라도 만족하면 됩니다.
    #                   즉, 01 부터 09 까지 그리고, 10 에서 12 까지 검출합니다.
    # (0[1-9]|[1,2][0-9]|3[0,1]) : 주민등록번호의 일에 해당하는 부분으로 0[1-9] 나 [1,2][0-9], 3[0,1] 의 조건 중 하나라도 만족하면 됩니다.
    #                              즉, 01 부터 09, 10 부터 29, 30 부터 31 까지 검출합니다.
    #
    # '-' : 주민등록번호에서 앞번호와 뒷번호를 구분하기 위해 사용합니다.
    # [1-4][0-9]{6} : 주민등록번호의 뒷자리에 해당하는 값으로 맨 처음 숫자는 1~4 까지, 그리고 뒤에 6 개의 숫자가 포함되어 총 7 자리를 구성합니다.
    regex = re.compile(r'(?:[0-9]{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[1,2][0-9]|3[0,1]))-[1-4][0-9]{6}')
    searched = regex.findall(identify_str)

    print (searched)


if __name__ == '__main__':
    remove_white_space()
    get_korean_identify()
